# -*- coding: utf-8 -*-
"""xgb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LcdPvQsvwvTsTx_kfDpdiTAsZABhNOIV
"""

import pandas as pd
file=pd.read_csv('/pima-indians-diabetes.data.csv',header=None)
file.head()

from xgboost import XGBClassifier
from xgboost import plot_importance
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier

f=file.values
x=f[:,0:7]
y=f[:,8]

d=.30
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=d,random_state=11)
x_test

model=XGBClassifier()
model1=RandomForestClassifier()
model.fit(x_train,y_train)
model1.fit(x_train,y_train)

yt=model.predict(x_test)
y1=model1.predict(x_test)
acc=accuracy_score(y_test,yt)
acc

from matplotlib import pyplot
plot_importance(model)
pyplot.show()

from numpy import sort
from sklearn.feature_selection import SelectFromModel
thresholds = sort(model.feature_importances_)
for thresh in thresholds:
# select features using threshold
  selection = SelectFromModel(model, threshold=thresh, prefit=True)
  select_X_train = selection.transform(x_train)
# train model
  selection_model = XGBClassifier()
  selection_model.fit(select_X_train, y_train.values.ravel())
# eval model
  select_X_test = selection.transform(x_test)
  predictions = selection_model.predict(select_X_test)
  accuracy = accuracy_score(y_test, predictions)
  print(accuracy)

